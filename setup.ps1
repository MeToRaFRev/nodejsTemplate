## This script sets up a new Express.js project with a basic directory structure and files.
## It also installs the necessary dependencies and creates a .env file with a KEY_PASSWORD variable.
## The script assumes that you have Node.js and npm installed on your system.
# Usage: .\setup.ps1 -name express-app

param (
    [string]$name = "express-app"
)

# Set up project directory
mkdir $name
cd $name

# Initialize npm and install dependencies
npm init -y
if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

npm install express winston dotenv
if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

# Create directory structure
mkdir routes, controllers, middlewares, config, certs

# Create .env file
@"
KEY_PASSWORD=
HOST=0.0.0.0
"@ | Out-File -FilePath .env -Encoding utf8 -Force

# Create .gitignore file
@"
# Node.js
node_modules/
npm-debug.log
yarn-error.log
package-lock.json
yarn.lock

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment Variables
.env

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov/

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output/

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt/

# Bower dependency directory (https://bower.io/)
bower_components/

# Editor directories and files
.idea/
.vscode/
*.suo
*.ntvs*
*.njsproj
*.sln

# MacOS files
.DS_Store

# Certificates
certs/
"@ | Out-File -FilePath .gitignore -Encoding utf8 -Force

# Create necessary files and add content
@'
const { createLogger, format, transports } = require('winston');
const { combine, timestamp, printf } = format;

const logFormat = printf(({ level, message, timestamp }) => {
  return `${timestamp} [${level}]: ${message}`;
});

const logger = createLogger({
  level: 'info',
  format: combine(
    timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
    logFormat
  ),
  transports: [
    new transports.Console(),
    new transports.File({ filename: 'combined.log' }),
  ],
});

module.exports = logger;
'@ | Out-File -FilePath config/logger.js -Encoding utf8 -Force

@'
const logger = require('../config/logger');

exports.notFound = (req, res, next) => {
  res.status(404).send('Sorry, we could not find that!');
  logger.warn(`404 - Not Found - ${req.originalUrl} - ${req.method} - ${req.ip}`);
};

exports.serverError = (err, req, res, next) => {
  logger.error(`${err.status || 500} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`);
  res.status(500).send('Something broke!');
};
'@ | Out-File -FilePath middlewares/errorHandler.js -Encoding utf8 -Force

@'
const logger = require('../config/logger');

exports.home = (req, res) => {
  res.send('Hello, World!');
  logger.info('Home route accessed');
};

exports.postData = (req, res) => {
  const data = req.body;
  res.send(`You sent: ${JSON.stringify(data)}`);
  logger.info('Data received', { data });
};
'@ | Out-File -FilePath controllers/indexController.js -Encoding utf8 -Force

@'
const express = require('express');
const router = express.Router();
const indexController = require('../controllers/indexController');

router.get('/', indexController.home);
router.post('/data', indexController.postData);

module.exports = router;
'@ | Out-File -FilePath routes/index.js -Encoding utf8 -Force

@'
const fs = require('fs');
const http = require('http');
const https = require('https');
const express = require('express');
const dotenv = require('dotenv');
dotenv.config();
const app = express();
const routes = require('./routes/index');
const errorHandler = require('./middlewares/errorHandler');
const logger = require('./config/logger');

const useHttps = fs.existsSync('./certs/cert.pem') && fs.existsSync('./certs/key.pem');
const port = useHttps ? 443 : 80;
const host = process.env.HOST || 'localhost';

// Middleware for parsing JSON bodies
app.use(express.json());

// Request logging
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.url}`);
  next();
});

// Use routes
app.use('/', routes);

// 404 handler
app.use(errorHandler.notFound);

// Error handler
app.use(errorHandler.serverError);

// Start the server
if (useHttps) {
  const options = {
    key: fs.readFileSync('./certs/key.pem'),
    cert: fs.readFileSync('./certs/cert.pem'),
    passphrase: process.env.KEY_PASSWORD || ''
  };
  https.createServer(options, app).listen(port, host, () => {
    logger.info(`HTTPS Server is running on https://0.0.0.0:${port}`);
  });
} else {
  http.createServer(app).listen(port, host, () => {
    logger.info(`HTTP Server is running on http://0.0.0.0:${port}`);
  });
}
'@ | Out-File -FilePath app.js -Encoding utf8 -Force

# Update package.json to include start script
(Get-Content package.json) -replace '"scripts": {', '"scripts": {"start": "node app.js", ' | Set-Content package.json

cd ..